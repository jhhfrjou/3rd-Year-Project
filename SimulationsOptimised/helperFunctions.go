package main

import (
	"fmt"
	"math"
	"math/rand"
	"sync"
	"time"
)

type scenario struct {
	r  []float64
	b  []float64
	kR [][]float64
	kB [][]float64
}

type allocation struct {
	fireAllocation [][]float64
	score          float64
}

func scale(scalor float64, vector []float64) []float64 {
	wg := sync.WaitGroup{}
	wg.Add(len(vector))
	for i := range vector {
		go func(index int) {
			vector[index] = scalor * vector[index]
			wg.Done()
		}(i)
	}
	wg.Wait()
	return vector
}

func vecAdd(v1, v2 []float64, add bool) []float64 {
	v3 := make([]float64, len(v1))
	wg := sync.WaitGroup{}
	wg.Add(len(v1))
	if add {
		for i := range v1 {
			go func(index int) {
				v3[index] = v1[index] + v2[index]
				wg.Done()
			}(i)
		}
	} else {
		for i := range v1 {
			go func(index int) {
				v3[index] = v1[index] - v2[index]
				wg.Done()
			}(i)
		}
	}
	wg.Wait()
	return v3
}

func sum(array []float64) (sum float64) {
	for _, v := range array {
		sum += v
	}
	return sum
}

func getRandomDefaultScenario() scenario {
	return getRandomScenario(4, 3)
}

func getRandomScenario(rSize, bSize int) scenario {
	kR := make([][]float64, bSize)
	kB := make([][]float64, rSize)
	r := make([]float64, rSize)
	b := make([]float64, bSize)
	for i := 0; i < rSize; i++ {
		r[i] = float64(rand.Intn(40) + 10)
		kB[i] = make([]float64, bSize)
		for j := 0; j < bSize; j++ {
			if i == 0 {
				kR[j] = make([]float64, rSize)
				b[j] = float64(rand.Intn(20) + 10)

			}
			kR[j][i] = rand.Float64()
			kB[i][j] = rand.Float64()
		}
	}
	return scenario{r, b, kR, kB}
}

func getDevelopingScenario() scenario {
	kR := [][]float64{
		{0.023, 0.08},
		{0.023, 0.05},
		{0.0024, 0.03},
	}
	kB := [][]float64{
		{0.023, 0.08, 0.01},
		{0.023, 0.05, 0.05},
	}
	R := []float64{300, 5}
	B := []float64{250, 10, 20}
	return scenario{R, B, kR, kB}
}

func getBigDevelopingScenario() scenario {
	R := []float64{110, 410, 150, 130, 410, 280, 280, 340, 330, 490, 450, 120, 440}
	B := []float64{170, 110, 100, 240, 190, 210, 160, 180, 170, 200, 180, 190}
	kR := [][]float64{
		{0.6645600532184904, 0.692024587353112, 0.7302314772948083, 0.08552050754191123, 0.0019038945142366389, 0.35576726540923664, 0.5203802857122278, 0.21647114665497036, 0.44846436394045647, 0.8475002622646813, 0.8058717675376446, 0.37026753645051064, 0.30220237504213365},
		{0.6868230728671094, 0.17326623818270528, 0.4283570818068078, 0.6227283173637045, 0.915821314612957, 0.2318300419376769, 0.15184340208190175, 0.4020708452718306, 0.08247967651135, 0.24784452318699535, 0.7185304493527748, 0.6432040265702031, 0.1340841627502418},
		{0.09696951891448456, 0.544155573000885, 0.6826534880132438, 0.2368225468054852, 0.559392449071014, 0.4983943012759756, 0.3152080853201245, 0.16867966833433606, 0.40018828942364343, 0.07503721013465342, 0.8958032677441458, 0.7911253356619845, 0.6408648211682538},
		{0.8136399609900968, 0.4231522015718281, 0.9222122589217269, 0.18724610140105305, 0.8780117586524, 0.02519395979489504, 0.13780406161952607, 0.8279280961505588, 0.9498832061012532, 0.6293316916453007, 0.018713221139656417, 0.34686388037925503, 0.8098742259339521},
		{0.31805817433032985, 0.2535405005150605, 0.4931419977048804, 0.6280981712183633, 0.6001655953233308, 0.5893830864007992, 0.5390745170394794, 0.05792625966433577, 0.4993854937524132, 0.6320034337887998, 0.423553153885841, 0.8220928971765717, 0.9427573715373733},
		{0.29310185733681576, 0.7886049150193449, 0.9549454404167818, 0.28133029380535923, 0.8458327872480417, 0.572086801443084, 0.5127817581110815, 0.411540363220476, 0.01980867032545194, 0.014827369494876504, 0.43269824007906393, 0.599194252505881, 0.4946804357820598},
		{0.20318687664732285, 0.8805431227416171, 0.6908388315056789, 0.43491247389145765, 0.641784290799583, 0.4117626883450162, 0.6530402051353608, 0.7807540845584926, 0.42868843006993296, 0.06875619520215474, 0.8557044145748864, 0.41358098797631293, 0.7107439118190982},
		{0.8624914374478864, 0.8943617293304537, 0.5637795958152644, 0.5501469205077233, 0.17365584472313275, 0.49160739613162047, 0.654270134424146, 0.05349462449440764, 0.8874475008505005, 0.6491884165984236, 0.6590305330077544, 0.911613706791599, 0.4076328718919816},
		{0.7525730355516119, 0.9769168685862624, 0.5517650490127749, 0.7291807267342981, 0.8143945509670211, 0.7972085409108028, 0.6366442140381798, 0.2507622754291802, 0.7650082149332798, 0.8348057602192125, 0.5034867900486911, 0.22891758676059876, 0.9443971387003045},
		{0.6967191657466347, 0.22228941700678773, 0.40380328579570035, 0.0005138155161213613, 0.03032254783300687, 0.7830349733960021, 0.030682195787138565, 0.9738818740706728, 0.7275772560415229, 0.6613931805833426, 0.023109568410543832, 0.35076512764716117, 0.28863831012730923},
		{0.15832827774512764, 0.24151508854715265, 0.9859647293402467, 0.39998376285699544, 0.9756748149873165, 0.1304138461737918, 0.3691117091643448, 0.021533783325605065, 0.5130875060878567, 0.31051027622482125, 0.2611756191882184, 0.3038021298543657, 0.45258447627808124},
		{0.07945362337387198, 0.932846428518434, 0.3220839705208817, 0.6039781022829275, 0.2940063127950149, 0.7398257810158336, 0.34768170859156955, 0.09297015549992493, 0.7242290584591684, 0.967094341371773, 0.3148047959559753, 0.6715265504608378, 0.31536198151820755},
	}
	kB := [][]float64{
		{0.4377141871869802, 0.06563701921747622, 0.30091186058528707, 0.21426387258237492, 0.4688898449024232, 0.6790846759202163, 0.360871416856906, 0.29311424455385804, 0.2065826619136986, 0.5238203060500009, 0.6072534395455154, 0.5948085976830626},
		{0.30152268100656, 0.5410998550087353, 0.27850762181610883, 0.5305857153507052, 0.28208099496492467, 0.3618054804803169, 0.2971122606397708, 0.09745461839911657, 0.07429099894984302, 0.6810783123925709, 0.31152244431052484, 0.741848959991823},
		{0.18292491645390843, 0.8969919575618727, 0.9789293555766876, 0.09083727535388708, 0.9269868035744142, 0.3479539636282229, 0.7109071952999951, 0.6494894605929404, 0.7558235074915978, 0.13065111702897217, 0.8963417453962161, 0.7211477651926741},
		{0.6695752976997745, 0.3696928436398219, 0.5352818906344061, 0.2388407028053186, 0.1267529293726013, 0.41032284435628247, 0.6250950283005304, 0.6236088264529301, 0.8305339189948062, 0.7360686014954314, 0.497868113342702, 0.40961827788499267},
		{0.0028430411748625642, 0.5898341850049194, 0.8154051709333606, 0.4584424785756506, 0.02626515060968944, 0.24969320116349378, 0.24746660783662855, 0.5926237532124455, 0.6938381365172095, 0.539210105890946, 0.7507630564795985, 0.7531612777367586},
		{0.8319308529698163, 0.6278346050000227, 0.08983608926036683, 0.3922161831540248, 0.9296116354490302, 0.5885763451434821, 0.5525803898142438, 0.9579539135375136, 0.10738111282075208, 0.3932509992288867, 0.19003276633920804, 0.6540414092312797},
		{0.09972966371993512, 0.07619026230375504, 0.15965092146489504, 0.32261068286779754, 0.5708516273454957, 0.6841751300974551, 0.524499759549865, 0.7163683749016712, 0.012825909106361078, 0.098030874806305, 0.826454125634742, 0.3443150177263606},
		{0.5550021356347942, 0.5064970636764183, 0.33136826030698385, 0.7002878731458151, 0.9991594902203332, 0.11167463676480495, 0.09211762444074219, 0.7146958158916296, 0.8486329209031569, 0.21256094905031958, 0.9451947603888259, 0.6458333745239767},
		{0.4872392485803695, 0.6718291062346395, 0.9002751472643116, 0.31933126760711733, 0.4004323171418129, 0.6450388660194482, 0.33959675138730994, 0.23632747430436052, 0.035754647436084384, 0.6258366269581253, 0.07244835679235131, 0.8798448463057091},
		{0.8321979381499331, 0.9133990629364709, 0.8351038011543529, 0.7517405788967347, 0.09693421323873166, 0.5838347418625311, 0.9982738110084945, 0.9854655786332479, 0.33205608571906026, 0.9560206265966097, 0.1843906940020268, 0.8332418155281546},
		{0.4173258421903824, 0.40673677545039083, 0.9581763626025936, 0.7916723090820832, 0.015181277223073395, 0.9047762370657334, 0.0429216421763342, 0.34785904313005395, 0.8399474211705598, 0.12436351859954159, 0.8349475064934941, 0.007681206474088089},
		{0.10019940926941497, 0.7698890899830834, 0.26238190747072776, 0.21465371537694145, 0.3511342996652132, 0.5783512569311121, 0.1198505089028631, 0.05378558010574821, 0.3241739630613883, 0.34928874777426255, 0.9687461599658117, 0.2079431283731565},
		{0.807941080954808, 0.9477602891945563, 0.9532587542503518, 0.1815908467575638, 0.8312410355437677, 0.8553103464769398, 0.27349475629159786, 0.9097612825191185, 0.4986324518556019, 0.9758952564996382, 0.044990698677957075, 0.9519061481203719},
	}
	return scenario{R, B, kR, kB}
}

func copyScen(original scenario) scenario {
	r := make([]float64, len(original.r))
	b := make([]float64, len(original.b))
	copy(r, original.r)
	copy(b, original.b)
	kR := copyMatrix(original.kR)
	kB := copyMatrix(original.kB)
	return scenario{r, b, kR, kB}
}

func prettyPrintScen(scenario scenario) {
	fmt.Println("R", scenario.r)
	fmt.Println("B", scenario.b)
	fmt.Println("kR")
	for _, v := range scenario.kR {
		fmt.Println(v)
	}
	fmt.Println("kB")
	for _, v := range scenario.kB {
		fmt.Println(v)
	}
}

func prettyPrintAllocation(allocation allocation) {
	fmt.Println("Score: ", allocation.score)
	fmt.Println("Allocation")
	for _, v := range allocation.fireAllocation {
		fmt.Println(v)
	}
}

func getRandomWeight(scenario scenario) allocation {
	weights := make([][]float64, len(scenario.kR[0]))
	for i := range weights {
		weights[i] = getRandomVector(len(scenario.kR))
	}
	return allocation{transpose(weights), -math.MaxFloat64}
}

func getRandomWeights(scenario scenario, sampleSize int) []allocation {
	weights := make([]allocation, sampleSize)
	for i := range weights {
		weights[i] = getRandomWeight(scenario)
	}
	return weights
}

func getRandomVector(num int) []float64 {
	samples := []float64{}
	for i := 0; i < num; i++ {
		samples = append(samples, rand.Float64())
	}
	sumed := sum(samples)
	return scale(1.0/sumed,samples)
}

func transpose(original [][]float64) [][]float64 {
	transposed := make([][]float64, len(original[0]))
	for j, row := range original {
		for i,val := range row {
			if j == 0 {
				transposed[i] = make([]float64, len(original))
			}
			transposed[i][j] = val
		}
	}
	return transposed
}

//Adapted from https://github.com/mxschmitt/golang-combinations
func combs(inputs []float64) (combs []float64) {
	length := uint(len(inputs))
	for combsBits := 1; combsBits < (1 << length); combsBits++ {
		comb := 1.0

		for factor := uint(0); factor < length; factor++ {
			if (combsBits>>factor)&1 == 1 {
				comb *= inputs[factor]
			}
		}
		combs = append(combs, comb)
	}
	return combs
}

func copyMatrix(original [][]float64) [][]float64 {
	copied := make([][]float64, len(original))
	for i := range original {
		copied[i] = make([]float64, len(original[i]))
		copy(copied[i], original[i])
	}
	return copied
}

type boolgen struct {
	src       rand.Source
	cache     int64
	remaining int
}

func (b *boolgen) Bool() bool {
	if b.remaining == 0 {
		b.cache, b.remaining = b.src.Int63(), 63
	}

	result := b.cache&0x01 == 1
	b.cache >>= 1
	b.remaining--

	return result
}

func new() *boolgen {
	return &boolgen{src: rand.NewSource(time.Now().UnixNano())}
}

func diff(allocation [][]float64, policyCode int, scen scenario, delta float64) [][]float64 {
	score, _ := simulate(scen, allocation, policyCode)
	diffs := make([][]float64, len(allocation))
	wg := sync.WaitGroup{}
	wg.Add(len(allocation))
	for i := range allocation {
		diffs[i] = make([]float64, len(allocation[i]))
		for j := range allocation[i] {
			go func(indexI, indexJ int) {
				diffs[indexI][indexJ] = diffWeightScore(indexI, indexJ, policyCode, delta, score, allocation, scen)
				wg.Done()
			}(i, j)
		}
	}
	wg.Wait()

	return diffs
}

func diffWeightScore(indexX, indexY, policyCode int, delta, origScore float64, original [][]float64, scen scenario) float64 {
	differential := copyMatrix(original)
	differential[indexX][indexY] = delta + differential[indexX][indexY]
	score, _ := simulate(scen, differential, policyCode)
	diff := score - origScore
	return diff / delta
}
